version: "3"
services:
  caddy:
    image: caddy:latest
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
    ports:
      - "80:80"
      - "443:443"
    networks:
      - metronome-network

  web:
    build: 
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    command: /bin/sh -c "pnpm --filter @metronome/db configure && pnpm --filter @metronome/web start"
    healthcheck:
      test: "curl --fail http://localhost:${APP_PORT}/healthcheck"
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - metronome-network

  workers:
    build: 
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      web:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    command: "pnpm --filter @metronome/workers start"
    networks:
      - metronome-network

  db:
    restart: always
    platform: linux/amd64
    image: "timescale/timescaledb-ha:pg15.3-ts2.11.1"
    environment:
      POSTGRES_USER: "${DB_WRITE_USER}"
      POSTGRES_PASSWORD: "${DB_WRITE_PASSWORD}"
      POSTGRES_DB: "${DB_WRITE_DATABASE}"
      TIMESCALEDB_TELEMETRY: "off"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_WRITE_USER} -d ${DB_WRITE_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ["-c", "max_connections=9999"]
    networks:
      - metronome-network
    volumes:
      - "db:/home/postgres/pgdata/data"

  redis:
    restart: always
    image: redis:6.2.6
    command:
      - redis-server
      - --appendonly yes
      - --requirepass
      - "${REDIS_CACHE_PASSWORD}"
    volumes:
      - "redis:/data"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - metronome-network

  clickhouse:
    image: clickhouse/clickhouse-server:latest-alpine
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8123:8123"
      - "9000:9000"
      - "9009:9009"
    environment:
      POSTGRES_HOST: "db"
      POSTGRES_SCHEMA: "public"
      POSTGRES_PORT: "${DB_READ_PORT}"
      POSTGRES_USER: "${DB_READ_USER}"
      POSTGRES_PASSWORD: "${DB_READ_PASSWORD}"
      POSTGRES_DATABASE: "${DB_READ_DATABASE}"
      CLICKHOUSE_USER: "${CLICKHOUSE_USER}"
      CLICKHOUSE_PASSWORD: "${CLICKHOUSE_PASSWORD}"
      CLICKHOUSE_DB: "${CLICKHOUSE_DB}"
    volumes:
      - "clickhouse:/var/lib/clickhouse"
      - "./metronome/packages/db/clickhouse/docker/postgres.xml.template:/etc/clickhouse-server/config.d/postgres.xml.template"
      - "./metronome/packages/db/clickhouse/docker/entrypoint.sh:/entrypoint-patch.sh"
    entrypoint: ["/entrypoint-patch.sh"]
    networks:
      - metronome-network

  minio:
    image: minio/minio:latest
    ports:
      - "9002:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: "${S3_ACCESS_KEY_ID}"
      MINIO_ROOT_PASSWORD: "${S3_SECRET_ACCESS_KEY}"
      MINIO_KMS_MASTER_KEY: "${S3_KMS_MASTER_KEY}"
    command: server /data --console-address ":9001"
    volumes:
      - "minio:/data"
    networks:
      - metronome-network

networks:
  metronome-network:

volumes:
  db:
    driver: local
  redis:
    driver: local
  clickhouse:
      driver: local
  minio:
    driver: local
